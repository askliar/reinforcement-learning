%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 1102.000000 655.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.3 (Build 17D102) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1102 655
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1102 655
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /Y put
dup 34 /Z put
dup 35 /X put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<


00>] def
/CharStrings 5 dict dup begin
/.notdef 0 def
/X 1 def
/Y 2 def
/Z 3 def
/uni2B91 4 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4243299 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C959DCA2B25064CB2EE653C8C5E0D08068DD956094993D87692D1893E7882B3267FBEDEB677400A54C3FF791059355FC781EA890EE12CE6212CB47D9946BF6264598FD8C1A7061938A62AD044BBDE63F80B331D85550365CC5629A9A18C000EB014D4569A24FBC647D33CA2388326DC778408BC1D884A457D73BABEC0FFFDF6050232CD441D6DDA35CF46B1886836E1B3EB6EEB530A0C915729DF2F0F611CE262CE03F113F34CCAA8681A6AB9DC77B6B4DC814E3F86C1E2183BD5C6FCBBC8686AB500F360CF326A2442B2C08419E080AF7DF58BD8AD3CD8ED7F3C0DA108286C0EC9787578BE8B1ABE9E4717B087DAF9FB13CA1A118A6E6CABD74808E6808785299F1D29B0F799DF1107EEE2E97A51D5B4BDC7CBDBF1FE0BD1E441A0EE1495597798CE575A4C4212CDB86A5737B65173BCD038719A6C3B0C856271A157DE498980B1D905E8022A8477E518181FCC3B62A81127F0052182467DF890DAB69019D53A91CAB6A6BF5AFF6DCA6FD0702EF21FBC30E4B2BFD56D2034A4BE52C8574A9DFC61517B8C77A1B0D4BA913A5E4A0A9243961D8F85D70BB7A00B94FCB48BF90918C04CE4563CFD194CB5211254F6AB025B3DC96F3A8CE0126DD64E40F17999FEDF725E769823A184B0C109AC30833C7953A46F4FFE18
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 1102 655 rc
0 655 m
1102 655 l
1102 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-3269.4443 4441.1113 m
3569.4443 4441.1113 l
3569.4443 -1783.8889 l
-3269.4443 -1783.8889 l
h
-3269.4443 4441.1113 m
f
86.355301 486.35529 m
105.8816 466.8291 105.8816 435.1709 86.355301 415.64471 c
66.829102 396.11841 35.170898 396.11841 15.6447 415.64471 c
-3.8815999 435.1709 -3.8815999 466.8291 15.6447 486.35529 c
35.170898 505.88159 66.829102 505.88159 86.355301 486.35529 c
f
1 J
1 j
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -799 1454 cm
885.35529 967.64471 m
904.88159 987.1709 904.88159 1018.8291 885.35529 1038.3553 c
865.8291 1057.8816 834.1709 1057.8816 814.64471 1038.3553 c
795.11841 1018.8291 795.11841 987.1709 814.64471 967.64471 c
834.1709 948.11841 865.8291 948.11841 885.35529 967.64471 c
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 51 451 cm
/F1.1[ 16 0 0 -16 0 0]sf
-5.184 5.776001 m
(!)s
/Cs2 SC
1 1 1 sc
CM
286.35529 486.35529 m
305.88159 466.8291 305.88159 435.1709 286.35529 415.64471 c
266.8291 396.11841 235.1709 396.11841 215.6447 415.64471 c
196.11839 435.1709 196.11839 466.8291 215.6447 486.35529 c
235.1709 505.88159 266.8291 505.88159 286.35529 486.35529 c
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -799 1454 cm
1085.3553 967.64471 m
1104.8816 987.1709 1104.8816 1018.8291 1085.3553 1038.3553 c
1065.8291 1057.8816 1034.1709 1057.8816 1014.6447 1038.3553 c
995.11841 1018.8291 995.11841 987.1709 1014.6447 967.64471 c
1034.1709 948.11841 1065.8291 948.11841 1085.3553 967.64471 c
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 251 451 cm
-4.888 5.776001 m
(")s
/Cs2 SC
1 1 1 sc
CM
186.3553 639.35529 m
205.88161 619.8291 205.88161 588.1709 186.3553 568.64471 c
166.8291 549.11841 135.1709 549.11841 115.6447 568.64471 c
96.118401 588.1709 96.118401 619.8291 115.6447 639.35529 c
135.1709 658.88159 166.8291 658.88159 186.3553 639.35529 c
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -799 1454 cm
985.35529 814.64471 m
1004.8816 834.1709 1004.8816 865.8291 985.35529 885.35529 c
965.8291 904.88159 934.1709 904.88159 914.64471 885.35529 c
895.11841 865.8291 895.11841 834.1709 914.64471 814.64471 c
934.1709 795.11841 965.8291 795.11841 985.35529 814.64471 c
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 151 604 cm
-4.888 5.776001 m
(#)s
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -799 1454 cm
922.6394 891.86169 m
882.77692 952.85132 l
S
0 i
CM
79.400093 494.45215 m
86.288109 499.50739 l
81.265717 502.78998 l
h
79.400093 494.45215 m
f
0 J
0 j
1 0 0 -1 -799 1454 cm
878.40009 959.54785 m
885.28809 954.49261 l
880.26569 951.21002 l
h
878.40009 959.54785 m
S
1 J
1 j
0.60000002 i
977.3606 891.86169 m
1017.2231 952.85132 l
S
0 i
CM
222.5999 494.45215 m
220.73428 502.78998 l
215.71188 499.50739 l
h
222.5999 494.45215 m
f
0 J
0 j
1 0 0 -1 -799 1454 cm
1021.5999 959.54785 m
1019.7343 951.21002 l
1014.7119 954.49261 l
h
1021.5999 959.54785 m
S
1 J
1 j
0.60000002 i
900 1003 m
990.09998 1003 l
S
0 i
CM
199.09998 451 m
191.09998 454 l
191.09998 448 l
h
199.09998 451 m
f
0 J
0 j
1 0 0 -1 -799 1454 cm
998.09998 1003 m
990.09998 1000 l
990.09998 1006 l
h
998.09998 1003 m
S
1 1 1 sc
CM
486.35529 486.35529 m
505.88159 466.8291 505.88159 435.1709 486.35529 415.64471 c
466.8291 396.11841 435.1709 396.11841 415.64471 415.64471 c
396.11841 435.1709 396.11841 466.8291 415.64471 486.35529 c
435.1709 505.88159 466.8291 505.88159 486.35529 486.35529 c
f
1 J
1 j
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -799 1454 cm
1285.3553 967.64471 m
1304.8816 987.1709 1304.8816 1018.8291 1285.3553 1038.3553 c
1265.8291 1057.8816 1234.1709 1057.8816 1214.6447 1038.3553 c
1195.1184 1018.8291 1195.1184 987.1709 1214.6447 967.64471 c
1234.1709 948.11841 1265.8291 948.11841 1285.3553 967.64471 c
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 451 451 cm
-5.184 5.776001 m
(!)s
/Cs2 SC
1 1 1 sc
CM
686.35529 486.35529 m
705.88159 466.8291 705.88159 435.1709 686.35529 415.64471 c
666.8291 396.11841 635.1709 396.11841 615.64471 415.64471 c
596.11841 435.1709 596.11841 466.8291 615.64471 486.35529 c
635.1709 505.88159 666.8291 505.88159 686.35529 486.35529 c
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -799 1454 cm
1485.3553 967.64471 m
1504.8816 987.1709 1504.8816 1018.8291 1485.3553 1038.3553 c
1465.8291 1057.8816 1434.1709 1057.8816 1414.6447 1038.3553 c
1395.1184 1018.8291 1395.1184 987.1709 1414.6447 967.64471 c
1434.1709 948.11841 1465.8291 948.11841 1485.3553 967.64471 c
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 651 451 cm
-4.888 5.776001 m
(")s
/Cs2 SC
1 1 1 sc
CM
586.35529 639.35529 m
605.88159 619.8291 605.88159 588.1709 586.35529 568.64471 c
566.8291 549.11841 535.1709 549.11841 515.64471 568.64471 c
496.11841 588.1709 496.11841 619.8291 515.64471 639.35529 c
535.1709 658.88159 566.8291 658.88159 586.35529 639.35529 c
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -799 1454 cm
1385.3553 814.64471 m
1404.8816 834.1709 1404.8816 865.8291 1385.3553 885.35529 c
1365.8291 904.88159 1334.1709 904.88159 1314.6447 885.35529 c
1295.1184 865.8291 1295.1184 834.1709 1314.6447 814.64471 c
1334.1709 795.11841 1365.8291 795.11841 1385.3553 814.64471 c
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 551 604 cm
-4.888 5.776001 m
(#)s
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -799 1454 cm
1322.6394 891.86169 m
1282.7769 952.85132 l
S
0 i
CM
479.40009 494.45215 m
486.28812 499.50739 l
481.26572 502.78998 l
h
479.40009 494.45215 m
f
0 J
0 j
1 0 0 -1 -799 1454 cm
1278.4001 959.54785 m
1285.2881 954.49261 l
1280.2657 951.21002 l
h
1278.4001 959.54785 m
S
1 J
1 j
0.60000002 i
1377.3606 891.86169 m
1417.2231 952.85132 l
S
0 i
CM
622.59991 494.45215 m
620.73431 502.78998 l
615.71191 499.50739 l
h
622.59991 494.45215 m
f
0 J
0 j
1 0 0 -1 -799 1454 cm
1421.5999 959.54785 m
1419.7343 951.21002 l
1414.7119 954.49261 l
h
1421.5999 959.54785 m
S
1 J
1 j
0.60000002 i
1400 1003 m
1309.9 1003 l
S
0 i
CM
502.90002 451 m
510.90002 448 l
510.90002 454 l
h
502.90002 451 m
f
0 J
0 j
1 0 0 -1 -799 1454 cm
1301.9 1003 m
1309.9 1006 l
1309.9 1000 l
h
1301.9 1003 m
S
1 J
1 j
0.60000002 i
900 1403 m
990.09998 1403 l
S
0 i
CM
199.09998 51 m
191.09998 54 l
191.09998 48 l
h
199.09998 51 m
f
0 J
0 j
1 0 0 -1 -799 1454 cm
998.09998 1403 m
990.09998 1400 l
990.09998 1406 l
h
998.09998 1403 m
S
1 1 1 sc
CM
86.355301 86.355301 m
105.8816 66.829102 105.8816 35.170898 86.355301 15.6447 c
66.829102 -3.8815999 35.170898 -3.8815999 15.6447 15.6447 c
-3.8815999 35.170898 -3.8815999 66.829102 15.6447 86.355301 c
35.170898 105.8816 66.829102 105.8816 86.355301 86.355301 c
f
1 J
1 j
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -799 1454 cm
885.35529 1367.6447 m
904.88159 1387.1709 904.88159 1418.8291 885.35529 1438.3553 c
865.8291 1457.8816 834.1709 1457.8816 814.64471 1438.3553 c
795.11841 1418.8291 795.11841 1387.1709 814.64471 1367.6447 c
834.1709 1348.1184 865.8291 1348.1184 885.35529 1367.6447 c
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 51 51 cm
-5.184 5.776001 m
(!)s
/Cs2 SC
1 1 1 sc
CM
286.35529 86.355301 m
305.88159 66.829102 305.88159 35.170898 286.35529 15.6447 c
266.8291 -3.8815999 235.1709 -3.8815999 215.6447 15.6447 c
196.11839 35.170898 196.11839 66.829102 215.6447 86.355301 c
235.1709 105.8816 266.8291 105.8816 286.35529 86.355301 c
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -799 1454 cm
1085.3553 1367.6447 m
1104.8816 1387.1709 1104.8816 1418.8291 1085.3553 1438.3553 c
1065.8291 1457.8816 1034.1709 1457.8816 1014.6447 1438.3553 c
995.11841 1418.8291 995.11841 1387.1709 1014.6447 1367.6447 c
1034.1709 1348.1184 1065.8291 1348.1184 1085.3553 1367.6447 c
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 251 51 cm
-4.888 5.776001 m
(")s
/Cs2 SC
1 1 1 sc
CM
186.3553 239.3553 m
205.88161 219.8291 205.88161 188.1709 186.3553 168.6447 c
166.8291 149.11839 135.1709 149.11839 115.6447 168.6447 c
96.118401 188.1709 96.118401 219.8291 115.6447 239.3553 c
135.1709 258.88159 166.8291 258.88159 186.3553 239.3553 c
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -799 1454 cm
985.35529 1214.6447 m
1004.8816 1234.1709 1004.8816 1265.8291 985.35529 1285.3553 c
965.8291 1304.8816 934.1709 1304.8816 914.64471 1285.3553 c
895.11841 1265.8291 895.11841 1234.1709 914.64471 1214.6447 c
934.1709 1195.1184 965.8291 1195.1184 985.35529 1214.6447 c
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 151 204 cm
-4.888 5.776001 m
(#)s
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -799 1454 cm
877.3606 1361.1383 m
917.22308 1300.1487 l
S
0 i
CM
122.59991 160.54785 m
115.71189 155.49263 l
120.73428 152.21002 l
h
122.59991 160.54785 m
f
0 J
0 j
1 0 0 -1 -799 1454 cm
921.59991 1293.4521 m
914.71191 1298.5073 l
919.73431 1301.79 l
h
921.59991 1293.4521 m
S
1 J
1 j
0.60000002 i
977.3606 1291.8617 m
1017.2231 1352.8513 l
S
0 i
CM
222.5999 94.452148 m
220.73428 102.78998 l
215.71188 99.50737 l
h
222.5999 94.452148 m
f
0 J
0 j
1 0 0 -1 -799 1454 cm
1021.5999 1359.5479 m
1019.7343 1351.21 l
1014.7119 1354.4927 l
h
1021.5999 1359.5479 m
S
1 1 1 sc
CM
486.35529 86.355301 m
505.88159 66.829102 505.88159 35.170898 486.35529 15.6447 c
466.8291 -3.8815999 435.1709 -3.8815999 415.64471 15.6447 c
396.11841 35.170898 396.11841 66.829102 415.64471 86.355301 c
435.1709 105.8816 466.8291 105.8816 486.35529 86.355301 c
f
1 J
1 j
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -799 1454 cm
1285.3553 1367.6447 m
1304.8816 1387.1709 1304.8816 1418.8291 1285.3553 1438.3553 c
1265.8291 1457.8816 1234.1709 1457.8816 1214.6447 1438.3553 c
1195.1184 1418.8291 1195.1184 1387.1709 1214.6447 1367.6447 c
1234.1709 1348.1184 1265.8291 1348.1184 1285.3553 1367.6447 c
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 451 51 cm
-5.184 5.776001 m
(!)s
/Cs2 SC
1 1 1 sc
CM
686.35529 86.355301 m
705.88159 66.829102 705.88159 35.170898 686.35529 15.6447 c
666.8291 -3.8815999 635.1709 -3.8815999 615.64471 15.6447 c
596.11841 35.170898 596.11841 66.829102 615.64471 86.355301 c
635.1709 105.8816 666.8291 105.8816 686.35529 86.355301 c
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -799 1454 cm
1485.3553 1367.6447 m
1504.8816 1387.1709 1504.8816 1418.8291 1485.3553 1438.3553 c
1465.8291 1457.8816 1434.1709 1457.8816 1414.6447 1438.3553 c
1395.1184 1418.8291 1395.1184 1387.1709 1414.6447 1367.6447 c
1434.1709 1348.1184 1465.8291 1348.1184 1485.3553 1367.6447 c
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 651 51 cm
-4.888 5.776001 m
(")s
/Cs2 SC
1 1 1 sc
CM
586.35529 239.3553 m
605.88159 219.8291 605.88159 188.1709 586.35529 168.6447 c
566.8291 149.11839 535.1709 149.11839 515.64471 168.6447 c
496.11841 188.1709 496.11841 219.8291 515.64471 239.3553 c
535.1709 258.88159 566.8291 258.88159 586.35529 239.3553 c
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -799 1454 cm
1385.3553 1214.6447 m
1404.8816 1234.1709 1404.8816 1265.8291 1385.3553 1285.3553 c
1365.8291 1304.8816 1334.1709 1304.8816 1314.6447 1285.3553 c
1295.1184 1265.8291 1295.1184 1234.1709 1314.6447 1214.6447 c
1334.1709 1195.1184 1365.8291 1195.1184 1385.3553 1214.6447 c
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 551 204 cm
-4.888 5.776001 m
(#)s
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -799 1454 cm
1277.3606 1361.1383 m
1317.2231 1300.1487 l
S
0 i
CM
522.59991 160.54785 m
515.71191 155.49263 l
520.73431 152.21002 l
h
522.59991 160.54785 m
f
0 J
0 j
1 0 0 -1 -799 1454 cm
1321.5999 1293.4521 m
1314.7119 1298.5073 l
1319.7343 1301.79 l
h
1321.5999 1293.4521 m
S
1 J
1 j
0.60000002 i
1300 1403 m
1390.1 1403 l
S
0 i
CM
599.09998 51 m
591.09998 54 l
591.09998 48 l
h
599.09998 51 m
f
0 J
0 j
1 0 0 -1 -799 1454 cm
1398.1 1403 m
1390.1 1400 l
1390.1 1406 l
h
1398.1 1403 m
S
1 J
1 j
0.60000002 i
1422.6394 1361.1383 m
1382.7769 1300.1487 l
S
0 i
CM
579.40009 160.54785 m
581.26569 152.21002 l
586.28809 155.49263 l
h
579.40009 160.54785 m
f
0 J
0 j
1 0 0 -1 -799 1454 cm
1378.4001 1293.4521 m
1380.2657 1301.79 l
1385.2881 1298.5073 l
h
1378.4001 1293.4521 m
S
1 J
1 j
0.60000002 i
1800 1003 m
1709.9 1003 l
S
0 i
CM
902.90002 451 m
910.90002 448 l
910.90002 454 l
h
902.90002 451 m
f
0 J
0 j
1 0 0 -1 -799 1454 cm
1701.9 1003 m
1709.9 1006 l
1709.9 1000 l
h
1701.9 1003 m
S
1 1 1 sc
CM
886.35529 486.35529 m
905.88159 466.8291 905.88159 435.1709 886.35529 415.64471 c
866.8291 396.11841 835.1709 396.11841 815.64471 415.64471 c
796.11841 435.1709 796.11841 466.8291 815.64471 486.35529 c
835.1709 505.88159 866.8291 505.88159 886.35529 486.35529 c
f
1 J
1 j
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -799 1454 cm
1685.3553 967.64471 m
1704.8816 987.1709 1704.8816 1018.8291 1685.3553 1038.3553 c
1665.8291 1057.8816 1634.1709 1057.8816 1614.6447 1038.3553 c
1595.1184 1018.8291 1595.1184 987.1709 1614.6447 967.64471 c
1634.1709 948.11841 1665.8291 948.11841 1685.3553 967.64471 c
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 851 451 cm
-5.184 5.776001 m
(!)s
/Cs2 SC
1 1 1 sc
CM
1086.3553 486.35529 m
1105.8816 466.8291 1105.8816 435.1709 1086.3553 415.64471 c
1066.8291 396.11841 1035.1709 396.11841 1015.6447 415.64471 c
996.11841 435.1709 996.11841 466.8291 1015.6447 486.35529 c
1035.1709 505.88159 1066.8291 505.88159 1086.3553 486.35529 c
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -799 1454 cm
1885.3553 967.64471 m
1904.8816 987.1709 1904.8816 1018.8291 1885.3553 1038.3553 c
1865.8291 1057.8816 1834.1709 1057.8816 1814.6447 1038.3553 c
1795.1184 1018.8291 1795.1184 987.1709 1814.6447 967.64471 c
1834.1709 948.11841 1865.8291 948.11841 1885.3553 967.64471 c
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 1051 451 cm
-4.888 5.776001 m
(")s
/Cs2 SC
1 1 1 sc
CM
986.35529 639.35529 m
1005.8816 619.8291 1005.8816 588.1709 986.35529 568.64471 c
966.8291 549.11841 935.1709 549.11841 915.64471 568.64471 c
896.11841 588.1709 896.11841 619.8291 915.64471 639.35529 c
935.1709 658.88159 966.8291 658.88159 986.35529 639.35529 c
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -799 1454 cm
1785.3553 814.64471 m
1804.8816 834.1709 1804.8816 865.8291 1785.3553 885.35529 c
1765.8291 904.88159 1734.1709 904.88159 1714.6447 885.35529 c
1695.1184 865.8291 1695.1184 834.1709 1714.6447 814.64471 c
1734.1709 795.11841 1765.8291 795.11841 1785.3553 814.64471 c
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 951 604 cm
-4.888 5.776001 m
(#)s
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -799 1454 cm
1822.6394 961.13831 m
1782.7769 900.14868 l
S
0 i
CM
979.40009 560.54785 m
981.26569 552.21002 l
986.28809 555.49261 l
h
979.40009 560.54785 m
f
0 J
0 j
1 0 0 -1 -799 1454 cm
1778.4001 893.45215 m
1780.2657 901.78998 l
1785.2881 898.50739 l
h
1778.4001 893.45215 m
S
1 J
1 j
0.60000002 i
1722.6394 891.86169 m
1682.7769 952.85132 l
S
0 i
CM
879.40009 494.45215 m
886.28809 499.50739 l
881.26569 502.78998 l
h
879.40009 494.45215 m
f
0 J
0 j
1 0 0 -1 -799 1454 cm
1678.4001 959.54785 m
1685.2881 954.49261 l
1680.2657 951.21002 l
h
1678.4001 959.54785 m
S
1 1 1 sc
CM
886.35529 86.355301 m
905.88159 66.829102 905.88159 35.170898 886.35529 15.6447 c
866.8291 -3.8815999 835.1709 -3.8815999 815.64471 15.6447 c
796.11841 35.170898 796.11841 66.829102 815.64471 86.355301 c
835.1709 105.8816 866.8291 105.8816 886.35529 86.355301 c
f
1 J
1 j
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -799 1454 cm
1685.3553 1367.6447 m
1704.8816 1387.1709 1704.8816 1418.8291 1685.3553 1438.3553 c
1665.8291 1457.8816 1634.1709 1457.8816 1614.6447 1438.3553 c
1595.1184 1418.8291 1595.1184 1387.1709 1614.6447 1367.6447 c
1634.1709 1348.1184 1665.8291 1348.1184 1685.3553 1367.6447 c
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 851 51 cm
-5.184 5.776001 m
(!)s
/Cs2 SC
1 1 1 sc
CM
1086.3553 86.355301 m
1105.8816 66.829102 1105.8816 35.170898 1086.3553 15.6447 c
1066.8291 -3.8815999 1035.1709 -3.8815999 1015.6447 15.6447 c
996.11841 35.170898 996.11841 66.829102 1015.6447 86.355301 c
1035.1709 105.8816 1066.8291 105.8816 1086.3553 86.355301 c
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -799 1454 cm
1885.3553 1367.6447 m
1904.8816 1387.1709 1904.8816 1418.8291 1885.3553 1438.3553 c
1865.8291 1457.8816 1834.1709 1457.8816 1814.6447 1438.3553 c
1795.1184 1418.8291 1795.1184 1387.1709 1814.6447 1367.6447 c
1834.1709 1348.1184 1865.8291 1348.1184 1885.3553 1367.6447 c
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 1051 51 cm
-4.888 5.776001 m
(")s
/Cs2 SC
1 1 1 sc
CM
986.35529 239.3553 m
1005.8816 219.8291 1005.8816 188.1709 986.35529 168.6447 c
966.8291 149.11839 935.1709 149.11839 915.64471 168.6447 c
896.11841 188.1709 896.11841 219.8291 915.64471 239.3553 c
935.1709 258.88159 966.8291 258.88159 986.35529 239.3553 c
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -799 1454 cm
1785.3553 1214.6447 m
1804.8816 1234.1709 1804.8816 1265.8291 1785.3553 1285.3553 c
1765.8291 1304.8816 1734.1709 1304.8816 1714.6447 1285.3553 c
1695.1184 1265.8291 1695.1184 1234.1709 1714.6447 1214.6447 c
1734.1709 1195.1184 1765.8291 1195.1184 1785.3553 1214.6447 c
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 951 204 cm
-4.888 5.776001 m
(#)s
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -799 1454 cm
1822.6394 1361.1383 m
1782.7769 1300.1487 l
S
0 i
CM
979.40009 160.54785 m
981.26569 152.21002 l
986.28809 155.49263 l
h
979.40009 160.54785 m
f
0 J
0 j
1 0 0 -1 -799 1454 cm
1778.4001 1293.4521 m
1780.2657 1301.79 l
1785.2881 1298.5073 l
h
1778.4001 1293.4521 m
S
1 J
1 j
0.60000002 i
1800 1403 m
1709.9 1403 l
S
0 i
CM
902.90002 51 m
910.90002 48 l
910.90002 54 l
h
902.90002 51 m
f
0 J
0 j
1 0 0 -1 -799 1454 cm
1701.9 1403 m
1709.9 1406 l
1709.9 1400 l
h
1701.9 1403 m
S
1 J
1 j
0.60000002 i
1677.3606 1361.1383 m
1717.2231 1300.1487 l
S
0 i
CM
922.59991 160.54785 m
915.71191 155.49263 l
920.73431 152.21002 l
h
922.59991 160.54785 m
f
0 J
0 j
1 0 0 -1 -799 1454 cm
1721.5999 1293.4521 m
1714.7119 1298.5073 l
1719.7343 1301.79 l
h
1721.5999 1293.4521 m
S
ep
end
%%Trailer
%%EOF
